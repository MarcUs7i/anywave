name: Create and publish a Docker image

on:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write  # Ensures it can push images to GHCR

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up QEMU for cross-platform builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Step 3: Set up Docker Buildx (to use advanced Docker builder)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 4: Log in to GitHub Container Registry (GHCR)
      # This is where authentication happens to push to GHCR
      - name: Log in to the Container registry
        uses: docker/login-action@v2  # Updated to the latest version of the action
        with:
          registry: ghcr.io
          username: ${{ github.actor }}  # Uses GitHub actor (current user)
          password: ${{ secrets.GITHUB_TOKEN }}  # GitHub Token used to authenticate

      # Step 5: Extract metadata (like tags and labels) for the Docker image
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4  # Make sure to use a stable release version
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Step 6: Build and push the Docker image
      # This step builds the image and pushes it to the registry
      - name: Build and push Docker image
        uses: docker/build-push-action@v5  # Update action version
        with:
          context: .
          push: true  # Ensures the image is pushed
          platforms: linux/amd64,linux/arm64  # Supports multiple architectures
          tags: ${{ steps.meta.outputs.tags }}  # Uses the tags extracted earlier
          labels: ${{ steps.meta.outputs.labels }}  # Uses the labels extracted earlier
